#%%
# %reload_ext autoreload
# %autoreload 2
#This imports the necessary path to draw the single pad transmon design. 
import sys
sys.path.append('../Customized_Components')
from single_pad_transmon_pocket import TransmonPocket_Single
from LaunchpadWirebondCustom import LaunchpadWirebondCustom
from CoupledLineTee import CoupledLineTee
from dolan_junction import DolanJunction


import shapely
import warnings
from shapely.errors import ShapelyDeprecationWarning
warnings.filterwarnings("ignore", category=ShapelyDeprecationWarning)
from qiskit_metal import designs, draw
from qiskit_metal import MetalGUI, Dict, Headings

from qiskit_metal.qlibrary.terminations.short_to_ground import ShortToGround
from qiskit_metal.qlibrary.terminations.open_to_ground import OpenToGround

from qiskit_metal.qlibrary.tlines.mixed_path import RouteMeander, RouteMixed
from qiskit_metal.qlibrary.tlines.anchored_path import RouteAnchors
from qiskit_metal.qlibrary.tlines.straight_path import RouteStraight

# from qiskit_metal.qlibrary.couplers.coupled_line_tee import CoupledLineTee
# from qiskit_metal.qlibrary.terminations.launchpad_wb import LaunchpadWirebond


import pyEPR as epr

import Default_res_params as dp

from qiskit_metal.toolbox_metal.parsing import *
from collections import OrderedDict
import pandas as pd
import numpy as np

#%%
gui = MetalGUI(dp.design)
design = dp.design
design.overwrite_enabled = True #This makes it possible to edit the designs later on. 

# %%


# -*- coding: utf-8 -*-

# This code is part of Qiskit.
#
# (C) Copyright IBM 2017, 2021.
#
# This code is licensed under the Apache License, Version 2.0. You may
# obtain a copy of this license in the LICENSE.txt file in the root directory
# of this source tree or at http://www.apache.org/licenses/LICENSE-2.0.
#
# Any modifications or derivative works of this code must retain this
# copyright notice, and modified files need to carry a notice indicating
# that they have been altered from the originals.

import numpy as np
from qiskit_metal import draw, Dict
from qiskit_metal.qlibrary.core import BaseQubit


import sys
sys.path.append('/Users/wendy/Desktop/Wendy-qiskit-code/Customized_Components')
from rounded_rectangle import rounded_rec_only as rec
from rounded_rectangle import rounded_rec as rec2



class TransmonCross(BaseQubit):  # pylint: disable=invalid-name
    """The base `TransmonCross` class.

    Inherits `BaseQubit` class.

    Simple Metal Transmon Cross object. Creates the X cross-shaped island,
    the "junction" on the south end, and up to 3 connectors on the remaining arms
    (claw or gap).

    'claw_width' and 'claw_gap' define the width/gap of the CPW line that
    makes up the connector. Note, DC SQUID currently represented by single
    inductance sheet

    Add connectors to it using the `connection_pads` dictionary. See BaseQubit for more
    information.

    Sketch:
        Below is a sketch of the qubit
        ::

                                        claw_length
            Claw:       _________                    Gap:
                        |   ________________             _________    ____________
                  ______|  |                             _________|  |____________
                        |  |________________
                        |_________


    .. image::
        transmon_cross.png

    .. meta::
        Transmon Cross

    BaseQubit Default Options:
        * connection_pads: Empty Dict -- The dictionary which contains all active connection lines for the qubit.
        * _default_connection_pads: empty Dict -- The default values for the (if any) connection lines of the qubit.

    Default Options:
        * cross_width: '20um' -- Width of the CPW center trace making up the Crossmon
        * cross_length: '200um' -- Length of one Crossmon arm (from center)
        * cross_gap: '20um' -- Width of the CPW gap making up the Crossmon
        * cross_radius: '8um' -- Radius of the corners of the Crossmon
        * _default_connection_pads: Dict
            * connector_type: '0' -- 0 = Claw type, 1 = gap type
            * claw_length: '30um' -- Length of the claw 'arms', measured from the connector center trace
            * ground_spacing: '5um' -- Amount of ground plane between the connector and Crossmon arm (minimum should be based on fabrication capabilities)
            * claw_width: '10um' -- The width of the CPW center trace making up the claw/gap connector
            * claw_gap: '6um' -- The gap of the CPW center trace making up the claw/gap connector
            * connector_location: '0' -- 0 => 'west' arm, 90 => 'north' arm, 180 => 'east' arm
    """

    default_options = Dict(
        cut_l='1000um',
        cut_h='1200um',
        gap='15um',
        w = '120um',
        l = '600um',
        r = '60um',
        cpw_l = '50um',
        coupling_gap = '30um',
        JJ_cutout_w = '70um',
        JJ_cutout_h = '70um',
        JJ_cutout_r = '15um',
        JJ_c_contact_l = '40um',
        JJ_c_contact_r = '2.5um',
        JJ_c_contact_w = '10um',
        JJ_c_contact_shortl = '10um',
        coupling_d = '350um',
        coupling_pad_w = '120um',
        coupling_r = '15um',
        cpw_pin = '5um',
        chip='main',
        resolution = '10',
        junction = 'False',
        orientation = '180',
        )
    """Default options."""

    component_metadata = Dict(short_name='Cross',
                              _qgeometry_table_poly='True',
                              _qgeometry_table_junction='True')
    """Component metadata"""

    TOOLTIP = """Simple Metal Transmon Cross."""

    ##############################################MAKE######################################################


    def make(self):
        """Makes a basic Crossmon, 4 arm cross."""

        # self.p allows us to directly access parsed values (string -> numbers) form the user option
        p = self.p

        cut_l = p.cut_l
        cut_h = p.cut_h
        gap = p.gap
        w = p.w
        r = min(p.r,w/2)
        l = p.l
        cpw_l = p.cpw_l
        coupling_gap = p.coupling_gap
        JJ_cutout_w = p.JJ_cutout_w
        JJ_cutout_h = p.JJ_cutout_h
        JJ_cutout_r = p.JJ_cutout_r
        JJ_c_contact_l = p.JJ_c_contact_l
        JJ_c_contact_r = p.JJ_c_contact_r
        JJ_c_contact_w = p.JJ_c_contact_w
        coupling_d = p.coupling_d
        coupling_pad_w = p.coupling_pad_w
        resolution = p.resolution
        coupling_r = p.coupling_r
        JJ_c_contact_shortl = p.JJ_c_contact_shortl
        
        right_pad_location = cpw_l+coupling_d+coupling_gap+coupling_pad_w/2*3+gap
        left_pad_location = cpw_l+coupling_d+coupling_gap+coupling_pad_w/2
        print(right_pad_location)
        
        coupling_stub_x = cpw_l+(coupling_d+coupling_gap)/2
        coupling_stub_y = w+coupling_gap
        
        coupling_r = min((l - 2*r)/2 - coupling_stub_y - w/2, coupling_r)

        # access to chip name
        chip = p.chip

        # Creates the cross and the etch equivalent.
        # cross_line = draw.shapely.ops.unary_union([
        #     draw.LineString([(0, cross_length), (0, -cross_length)]),
        #     draw.LineString([(cross_length, 0), (-cross_length, 0)])
        # ])

        # cross = cross_line.buffer(cross_width / 2, cap_style=2)
        # cross_etch = cross.buffer(cross_gap, cap_style=3, join_style=2)

        cutout_pad = rec(cut_l, cut_h,  r, resolution = resolution)
        cutout_pad = draw.translate(cutout_pad, cut_l/2, 0)
        
        pad = rec(w,l,  r, resolution = resolution)
        
        
        
        
        pad_right = draw.translate(pad, right_pad_location, 0)
        pad_left = draw.translate(pad, left_pad_location, 0)
        
        junction_location = cpw_l+coupling_d+coupling_gap+coupling_pad_w+gap/2
        
        JJ_cutouthalf_w = JJ_cutout_w/2-gap/2
        JJ_cutout_r = min(JJ_cutout_r, JJ_cutouthalf_w/2)
        
        JJ_cutout = rec2(JJ_cutouthalf_w, 
                         JJ_cutout_h, 
                         r = JJ_cutout_r, 
                         same_radius = True,  
                         resolution = resolution,
                         d1 = [-1,1],
                         d4 = [-1,-1])
        JJ_cutout_right = draw.translate(JJ_cutout,
                                        junction_location+gap/2+JJ_cutouthalf_w/2, 
                                        0)
        JJ_cutout_left = draw.rotate(JJ_cutout, 180, origin = (0,0))
        JJ_cutout_left = draw.translate(JJ_cutout_left, 
                                         junction_location-gap/2-JJ_cutouthalf_w/2, 
                                         0)
        JJ_cutouts = draw.union([JJ_cutout_left, JJ_cutout_right])
        
        
        
        jj_contact1 = rec(JJ_c_contact_w,JJ_c_contact_l,JJ_c_contact_r, resolution = resolution)
        JJ_contact1 = draw.translate(jj_contact1, -JJ_c_contact_w, 0)
        jj_contact2 = rec2(JJ_c_contact_shortl,
                           JJ_c_contact_w,
                           r = JJ_c_contact_r,
                           same_radius = True, 
                           resolution = resolution,
                           d1 = [-1,1], 
                           d2 = [1,1],
                           d3 = [1,-1],
                           d4 = [-1,-1])
        JJ_contact = draw.union([JJ_contact1, jj_contact2])
        
        JJ_contact_left = draw.translate(JJ_contact, junction_location-gap/2-JJ_c_contact_w/2-JJ_cutouthalf_w, 0)
        JJ_contact_right = draw.rotate(JJ_contact, 180, origin = (0,0))
        JJ_contact_right = draw.translate(JJ_contact_right, junction_location+gap/2+JJ_c_contact_w/2+JJ_cutouthalf_w, 0)
        
        
        # 
        JJ_cutouts1 = draw.union([JJ_contact_left, JJ_contact_right])
        
        JJ_cutouts = draw.union([JJ_cutouts, JJ_cutouts1])
        
    
        
        coupling_stub = rec(w,coupling_d+coupling_gap-w, coupling_r, resolution = resolution,connection = True,connection_direction = 270)
        coupling_stub = draw.translate(coupling_stub,w/2 , 0)
        sub_rounded = rec(w*2,w,r, resolution = resolution)
        sub_rounded = draw.translate(sub_rounded, -coupling_d/2+w, 0)
        
        coupling_stub = draw.union([coupling_stub, sub_rounded])
        
        
        coupling_stub_top = draw.translate(coupling_stub, coupling_stub_x, coupling_stub_y)
        coupling_stub_bot = draw.translate(coupling_stub, coupling_stub_x, -coupling_stub_y)
        
        coupling_pad_r = min(r, coupling_pad_w/2)
        coupling_pad = rec(coupling_d,coupling_pad_w,  coupling_pad_r, resolution = resolution)
        
        coupling_pad = draw.translate(coupling_pad, cpw_l+coupling_d/2, 0)
        
        cpw_stub = rec(cpw_l*2,p.cpw_pin,0, resolution = 1)
        cpw_stub = draw.translate(cpw_stub, cpw_l, 0)
        

        # if p.junction == 'True':
        #     cut_out = draw.rectangle(p.inductor_width/4, p.jj_pocket_extent/4)
        #     cut_out_big = draw.rectangle(p.inductor_width/2, p.jj_pocket_extent/4)
        #     cut_out_big = draw.translate(cut_out_big, 0, p.jj_pocket_extent/4)
        #     cutout = draw.shapely.ops.unary_union([cut_out, cut_out_big])
            
        #     cutout_top = draw.translate(cutout,0,-p.cross_length)
        #     cutout_bot = draw.rotate(cutout, 180, origin=(0,0))
        #     cutout_bot = draw.translate(cutout_bot,0,-p.cross_length-p.cross_gap)

        #     center_metal = center_metal.difference(cutout_top)
        #     center_metal_etch = draw.shapely.ops.unary_union([center_metal_etch, cutout_bot])

        # #rotate and translate
        poly_metal = draw.union([pad_right, pad_left, coupling_stub_top, coupling_stub_bot, coupling_pad, cpw_stub])
        polys = poly_metal.difference(JJ_cutouts)
        polys = draw.rotate(polys, p.orientation, origin=(0, 0))
        polys = draw.translate(polys, p.pos_x, p.pos_y)

        # [center_metal, center_metal_top, center_metal_bot, center_metal_etch, center_metal_top_etch, center_metal_bot_etch, rect_jj] = polys

        # generate qgeometry
        self.add_qgeometry('poly', dict(cross=polys), chip=chip)
        self.add_qgeometry('poly', dict(center_metal_etch=cutout_pad), chip=chip, subtract=True)
        
        # self.add_qgeometry('poly',
        #                    dict(cross_etch=cross_etch),
        #                    subtract=True,
        #                    chip=chip)
        # if p.junction == 'False':
        #     self.add_qgeometry('junction',
        #                    dict(rect_jj=rect_jj),
        #                    width=cross_width,
        #                    chip=chip)
    def get_jj_location(self):
        p = self.p
        junction_displacement = p.cpw_l+p.coupling_d+p.coupling_gap+p.coupling_pad_w+p.gap/2
        junction_loc_x = junction_displacement*np.cos(np.radians(p.orientation))+p.pos_x
        junction_loc_y = junction_displacement*np.sin(np.radians(p.orientation))+p.pos_y
        return (junction_loc_x, junction_loc_y)



#%%
default_options = Dict(
        cut_l='1000um',
        cut_h='1200um',
        gap='15um',
        w = '120um',
        l = '600um',
        r = '60um',
        cpw_l = '50um',
        coupling_gap = '30um',
        JJ_cutout_w = '70um',
        JJ_cutout_h = '70um',
        JJ_cutout_r = '150um',
        JJ_c_contact_l = '40um',
        JJ_c_contact_r = '2.5um',
        JJ_c_contact_w = '10um',
        coupling_d = '350um',
        coupling_pad_w = '120um',
        coupling_r = '150um',
        cpw_pin = '10um',
        chip='main',
        resolution = '10',
        junction = 'False',
        orientation = '0',
        JJ_c_contact_shortl = '10um',
        )


qubit = TransmonCross(design, 'Q1', options = default_options)
gui.rebuild()
# %%
qubit.options
# %%
coords = [(0.5225 -0,.185), 
           (0.5243467489107293, -0.1615348302439654), 
           (0.5298415225557269, -0.1386474508437579), 
           (0.5388490213717448, -0.116901425039068), 
           (0.5511474508437579, -0.096832212156129), 
           (0.5664339828220178, -0.0789339828220179), 
           (0.584332212156129, -0.0636474508437579), 
           (0.6044014250390679, -0.0513490213717448), 
           (0.6261474508437579, -0.042341522555727), 
           (0.6490348302439654, -0.0368467489107293), 
           (0.6725, -0.035), 
           (0.4, -0.035), 
           (0.4234651697560346, -0.0331532510892707), 
           (0.4463525491562421, -0.027658477444273), 
           (0.468098574960932, -0.0186509786282552), 
           (0.488167787843871, -0.0063525491562421), 
           (0.5060660171779822, 0.0089339828220179), 
           (0.5213525491562421, 0.026832212156129), 
           (0.5336509786282552, 0.046901425039068), 
           (0.5426584774442731, 0.0686474508437579), 
           (0.5481532510892707, 0.0915348302439654), 
           (0.55, 0.115), 
           (0.55, -0.115), 
           (0.5481532510892707, -0.0915348302439654), 
           (0.5426584774442731, -0.0686474508437579), 
           (0.5336509786282552, -0.046901425039068), 
           (0.5213525491562421, -0.026832212156129), 
           (0.5060660171779822, -0.0089339828220179), 
           (0.488167787843871, 0.0063525491562421), 
           (0.468098574960932, 0.0186509786282552), 
           (0.4463525491562421, 0.027658477444273), 
           (0.4234651697560346, 0.0331532510892707), 
           (0.4, 0.035), 
           (0.6725, 0.035), 
           (0.6490348302439654, 0.0368467489107293), 
           (0.6261474508437579, 0.042341522555727), 
           (0.6044014250390679, 0.0513490213717448), 
           (0.584332212156129, 0.0636474508437579), 
           (0.5664339828220178, 0.0789339828220179), 
           (0.5511474508437579, 0.096832212156129), 
           (0.5388490213717448, 0.116901425039068), 
           (0.5298415225557269, 0.1386474508437579), 
           (0.5243467489107293, 0.1615348302439654), 
           (0.5225, 0.185), 
           (0.5225, -0.185)]
#%%

import matplotlib.pyplot as plt
from shapely.geometry import Polygon
from shapely.geometry.polygon import LinearRing
polygon = Polygon(coords)

# Extract the exterior coordinates of the polygon
exterior_coords = polygon.exterior.coords.xy

# Plot the polygon
fig, ax = plt.subplots()
ax.plot(exterior_coords[0], exterior_coords[1], 'b-', linewidth=2)

# Optionally, plot the vertices
ax.plot(exterior_coords[0], exterior_coords[1], 'ro')

# Set the aspect ratio to be equal
ax.set_aspect('equal')

# Add grid and labels
ax.grid(True)
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_title('Polygon Plot')

# Show the plot
plt.show()
# %%
for c in coords:
    print(c)
# %%
JJ_cutout = rec2(28, 60, 
                         r = 15, 
                         same_radius = True,  
                         resolution = 5,
                         d1 = [-1,1],
                         d4 = [-1,-1])

JJ_cutout_left = draw.translate(JJ_cutout,
                                        30, 
                                        0)
# %%
JJ_cutout_left.exterior.coords.xy
# %%
