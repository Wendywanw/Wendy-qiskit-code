# %%
# %reload_ext autoreload
# %autoreload 2
#This imports the necessary path to draw the single pad transmon design. 
import sys
sys.path.append('../Customized_Components')
from bandaged_dolan import DolanJunctionBandage
from probe_pad import ProbePad
from text import Text_object

import shapely
import gdspy
import warnings
from shapely.errors import ShapelyDeprecationWarning
warnings.filterwarnings("ignore", category=ShapelyDeprecationWarning)


from qiskit_metal import designs, draw
from qiskit_metal import MetalGUI, Dict, Headings

from qiskit_metal.qlibrary.terminations.short_to_ground import ShortToGround
from qiskit_metal.qlibrary.terminations.open_to_ground import OpenToGround

from qiskit_metal.qlibrary.tlines.mixed_path import RouteMeander, RouteMixed
from qiskit_metal.qlibrary.tlines.anchored_path import RouteAnchors
from qiskit_metal.qlibrary.tlines.straight_path import RouteStraight

from qiskit_metal.qlibrary.couplers.coupled_line_tee import CoupledLineTee
from qiskit_metal.qlibrary.terminations.launchpad_wb import LaunchpadWirebond



import pyEPR as epr

import Default_res_params as dp

from qiskit_metal.toolbox_metal.parsing import *
from collections import OrderedDict
import pandas as pd
import numpy as np

#%%
gui = MetalGUI(dp.design)
design = dp.design
design.overwrite_enabled = True #This makes it possible to edit the designs later on. 




#%%



# %%
default_options = Dict(
        pos_x = '0um', 
        pos_y = '0um',
        text = 'haha',
        text_height = '20 mm',
        orientation = '0',
        layer = '0',
        )

text = Text_object(design, 'text', default_options)
gui.rebuild()












# %%
maximum_jj_w = 500 #nm
small_jj_length = 20#nm



dose_array_options = Dict(
    pos_x = '0um', 
    pos_y = '0um',
    w_pocket = '900 um',
    h_pocket = '600 um',
    w_pad = '400 um',
    h_pad = '300 um',
    pad_gap = '7 um',
    orientation = '0',
    layer = '0',
    )

JJ_options = Dict(
    pos_x = '0um',
    pos_y = '0um',
    w_pad_pin = '2 um',
    maximum_jj_width = '500nm',
    small_jj_length = '400nm',
    w_pad_u = '3 um',
    d_pin = '250 nm',
    d_u = '500 nm',
    total_length = '1 um',
    w_top_pin = '250 nm',
    w_top_u = '500 nm',
    w_bot_pin = '200 nm',
    w_bot_u = '500 nm',
    top_bot_offset = '0 nm' ,
    jj_extra = '600nm',
    jj_gap = '0.2um',
    fillet = '30 nm',
    # jj_gap_actual = '0.2um',
    # Lj = '10',
    resolution = '5',
    # Jc = '0.1',
    orientation = '90',
    pin_layer = '20',
    gap_layer = '60',
    area_layer_opt = 'False',
    jj_orientation = '180')

JJ_options1 = JJ_options.copy()
JJ_options1['d_pin'] = '3um'
JJ_options1['d_u'] = '4um'
JJ_options1['w_pad_pin'] = '5um'
JJ_options1['w_pad_u'] = '6um'
JJ_options1['total_length'] = '13um'
JJ_options1['jj_extra'] = '0um'
JJ_options1['small_jj_length'] = '600nm'


def junction_probe_pad(x,y,jj_w,jj_gap, name, dose_array_options = dose_array_options, JJ_options = JJ_options):

    dose_array_options['pos_x'] = x
    dose_array_options['pos_y'] = y

    JJ_options['pos_x'] = x
    JJ_options['pos_y'] = y
    JJ_options['w_bot_pin'] = jj_w
    JJ_options['jj_gap'] = jj_gap

    dose_array = ProbePad(design, name+'ProbePad', dose_array_options)
    dolan = DolanJunctionBandage(design,name+'JJ',JJ_options)


# %%
chip_size = 6500 #um

x_gap = 1000
y_gap = 1000

x_array = np.arange(-chip_size/2, chip_size/2, x_gap)
y_array = np.arange(-chip_size/2, chip_size/2, y_gap)



i = len(x_array)
j = len(y_array)



jj_gap = np.linspace(100,500,i)
jj_w = np.linspace(0,400,j)

for ii in range(i):
    for jj in range(j):
        x = x_array[ii]
        y = y_array[jj]
        junction_probe_pad(str(x)+'um',
                           str(y)+'um',
                           '{}nm'.format(jj_gap[ii]),
                           '{}nm'.format(jj_w[jj]),
                           'JJ'+str(ii)+"_"+str(jj),
                           JJ_options=JJ_options1)

gui.rebuild()

# %% 



# %%
# design.delete_all_components()

# jj = DolanJunctionBandage(design,'JJ',JJ_options1)
# gui.rebuild()

#%%

a_gds = design.renderers.gds

a_gds.options.cheese.edge_nocheese = '200um'
a_gds.options.no_cheese.buffer = '16um'
a_gds.options.cheese.cheese_1_radius = '70um'

qubit_layer = 5
junction_layer = 20
ab_layer = 31
ab_square_layer = 30
junction_area_layer = 60
a_gds.options['max_points'] = 500
a_gds.options['fabricate'] = True

a_gds.options['negative_mask'] = Dict(main = [0])

a_gds.options['cheese']['view_in_file']['main'][qubit_layer] = False
a_gds.options['no_cheese']['view_in_file']['main'][qubit_layer] = False
a_gds.options['cheese']['view_in_file']['main'][junction_layer] = False
a_gds.options['no_cheese']['view_in_file']['main'][junction_layer] = False
a_gds.options['cheese']['view_in_file']['main'][ab_layer] = False
a_gds.options['no_cheese']['view_in_file']['main'][ab_layer] = False
a_gds.options['cheese']['view_in_file']['main'][ab_square_layer] = False
a_gds.options['no_cheese']['view_in_file']['main'][ab_square_layer] = False
a_gds.options['cheese']['view_in_file']['main'][1] = False
a_gds.options['no_cheese']['view_in_file']['main'][1] = False

# a_gds.options['fabricate'] = False
a_gds.options.tolerance = '0.0000005'
a_gds.options.precision = '0.0000000005'

a_gds.export_to_gds('dose_chip.gds')


# %%
# a_gds.options
# %%
import gdspy as gp
import matplotlib.pyplot as plt


text = "Hello, GDS!"
size = 10  # Size of the text
position = (0, 0)  # Position of the text
layer = 1  # GDSII layer number

test_element = gp.Text('haha',size, position, layer=layer)
polygons = test_element.polygons



fig, ax = plt.subplots()
for polygon in polygons:
    exterior_coords = polygon
    ax.plot(exterior_coords[:,0], exterior_coords[:,1], 'b-', linewidth=2)
    ax.plot(exterior_coords[:,0], exterior_coords[:,1], 'ro')  # Optionally, plot the vertices

# Set the aspect ratio to be equal
ax.set_aspect('equal')

# Add grid and labels
ax.grid(True)
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_title('Polygons Plot')

# Show the plot
plt.show()

# %%
poly = [Polygon(polygon) for polygon in polygons]

p = unary_union(poly)
#%%
p
# %%
import matplotlib.pyplot as plt
from matplotlib.textpath import TextPath
from shapely.geometry import Polygon
from shapely.ops import unary_union
from shapely.affinity import translate, rotate
import matplotlib.font_manager as fm

def text_to_polygon(text, font_size=12, position=(0, 0), orientation=0):
    # Create a TextPath object
    font_properties = fm.FontProperties(size=font_size)
    text_path = TextPath(position, text, prop=font_properties)
    
    # Extract vertices and codes from the TextPath
    vertices = text_path.vertices
    codes = text_path.codes
    
    # Create a list of polygons for each sub-path in the text
    polygons = []
    current_path = []
    for vertex, code in zip(vertices, codes):
        if code == 1:  # MOVETO
            if len(current_path) >= 3:
                current_path.append(current_path[0])  # Close the polygon
                polygons.append(Polygon(current_path))
            current_path = [vertex]
        elif code == 2:  # LINETO
            current_path.append(vertex)
        elif code == 79:  # CLOSEPOLY
            if len(current_path) >= 3:
                current_path.append(current_path[0])  # Close the polygon
                polygons.append(Polygon(current_path))
            current_path = []
    
    # Combine all sub-paths into a single MultiPolygon
    text_polygon = unary_union(polygons)
    
    # Rotate and translate the polygon
    text_polygon = rotate(text_polygon, orientation, origin=position)
    text_polygon = translate(text_polygon, xoff=position[0], yoff=position[1])
    
    return text_polygon

# Example usage
text = "Hello, GDS!"
font_size = 12
position = (0, 0)
orientation = 0

text_polygon = text_to_polygon(text, font_size, position, orientation)

# Plot the polygon
fig, ax = plt.subplots()
if text_polygon.geom_type == 'Polygon':
    exterior_coords = text_polygon.exterior.coords.xy
    ax.plot(exterior_coords[0], exterior_coords[1], 'b-', linewidth=2)
    ax.plot(exterior_coords[0], exterior_coords[1], 'ro')  # Optionally, plot the vertices
elif text_polygon.geom_type == 'MultiPolygon':
    for polygon in text_polygon:
        exterior_coords = polygon.exterior.coords.xy
        ax.plot(exterior_coords[0], exterior_coords[1], 'b-', linewidth=2)
        ax.plot(exterior_coords[0], exterior_coords[1], 'ro')  # Optionally, plot the vertices

# Set the aspect ratio to be equal
ax.set_aspect('equal')

# Add grid and labels
ax.grid(True)
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_title('Text as Polygon Plot')

# Show the plot
plt.show()
# %%
